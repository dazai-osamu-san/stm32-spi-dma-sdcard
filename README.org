#+title: SPI-DMA-SD-Card
This project is a fork of a ControllersTech tutorial [[https://www.youtube.com/watch?time_continue=4&v=spVIZO-jbxE&source_ve_path=Mjg2NjY&feature=emb_logo][linked here]], modified to use DMA for SPI transmission and reception with an SD card.
You can watch the tutorial and just replace the files with the ones from this repository and change the interrupt handler file accordingly.
* Usage
1. Place the provided files in `Core/Src` and `Core/Inc` directories.
2. Modify your =stm32fxxxx_it.c= file as follows:
   - **Under private includes:**
     #+begin_src c
     #include "ff_gen_drv.h"
     #+end_src
   - **Under Private Variables:**
     #+begin_src c
     extern uint16_t Timer1, Timer2;
     #+end_src
   - **Under SystickHandler:**
     #+begin_src c
     if (Timer1 > 0) Timer1--;
     if (Timer2 > 0) Timer2--;
     #+end_src
3. Add the =sd_functions.h= file to the Makefile for compilation.
4. Add the provided functions to =FATFS/Target/user_diskio.c=.
5. In CubeMX/CubeIDE, enable Tx and Rx DMA for SPI under SPI -> DMA settings.
6. Enable SPI global interrupt under SPI -> NVIC settings.
7. Add the functions to the user_diskio.c file
    **Include the necessary headers:**
    #+begin_src c
    #include "sd_functions.h"
    #include "ff_gen_drv.h"
    #+end_src
    Add the sd_functions here
    #+begin_src c
DSTATUS SD_disk_initialize(BYTE drv) {
    // Copy the respective function from sd_functions.c
}

DSTATUS SD_disk_status(BYTE drv) {
    // Copy the respective function from sd_functions.c
}

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
    // Copy the respective function from sd_functions.c
}

#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
    // Copy the respective function from sd_functions.c
}
#endif

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) {
    // Copy the respective function from sd_functions.c
}
    #+end_src

For an even better refrence look at the example project
8. Use the FATFS library as usual.
* How it Works
The main difference from the original code is the use of DMA for SPI Send and Receive operations. DMA is utilized through specific HAL functions, and a flag is managed by the =HAL_SPI_TxRxCpltCallback= function to ensure that each transaction completes before the next one starts.
